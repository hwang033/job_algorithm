import pdb
class Solution:
    # @param s, a string
    # @return an integer
    def longestValidParentheses(self, s_str):
        #dynimic programming
        #if s[i] == ')': f[i][j] = f[i+1][j]
        #if s[i] == '(':
        #   if s[j] == ')' and (j + 1 - i) % 2 == 0: f[i][j] = max(f[i+1][j-1], f[i+1][j], f[i][j-1]) + 1
        #   else: f[i][j] = f[i][j-1]
        if not s_str:
            return 0
        s = list(s_str)
        f = [0 for i in range(len(s))]
        stack = []
        stack_idx = []
        #pdb.set_trace() 

        for i in range(len(s)):
            if s[i] == '(':
                stack.append(s[i])
                stack_idx.append(i)
            else:
                if len(stack) != 0: 
                    stack.pop()
                    idx = stack_idx.pop()
                    if idx > 0:
                        f[i] = f[idx-1] + f[i-1] + 2 
                    else:
                        f[i] = f[i-1] + 2 
        print f 
        return max(f) 

if __name__ == "__main__":
    s = Solution()
    #input = ['()(())', '(()', ')()())', '((()()()))']
    input
    for x in input:
        print x
        print s.longestValidParentheses(x)
