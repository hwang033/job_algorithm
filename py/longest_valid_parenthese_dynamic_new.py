import pdb
class Solution:
    # @param s, a string
    # @return an integer
    def longestValidParentheses(self, s_str):
        #dynimic programming
        # f[i][j] 2-d DP very slow
        s = list(s)
        f = [[0 for i in range(len(s))] for j in range(len(s))]

        max_val = [0]
        
        for i in range(len(s)-1, -1, -1):
            if s[i] == ")":
                continue
            pj = -1
            for j in range(i + 1, len(s)):
                if s[j] == ")":
                    # (()()) or ()
                    if f[i+1][j-1]  == j - i - 1:
                        f[i][j] =  f[i+1][j-1] + 2
                        pj = j
                        continue
                    # ()(()())
                    if pj != -1 and f[pj+1][j] != 0:
                        f[i][j] = f[pj+1][j] + f[i][pj]
                        pj = j
            max_val.append(max(f[i]))


        return max(max_val)
 

if __name__ == "__main__":
    s = Solution()
    #input = ['((()()()))']
    input = ['()(())', '(()', ')()())', '((()()()))']
    #input


    #input = ['(()(()()()(()())()(()()))()()())()(((()())((())(()()((()((((())(())()()(())()(()(()(())))))))(()()()))()()))))))(()())))((())())))()(((()(()))())((())))(())(((()()))))())))((()((()()(()))())(()))(())((())()(((()(((()))))()))()()())()()()(()(()(()()()(()(())(())))())()))())(())((())(()((((())((())((())(()()(((()))(()(((())())()(())))(()))))))(()(()(()))())(()()(()(((()()))()(())))(()()(())))))(()(()()())))()()())))))((())(()()(((()(()()))(())))(((()))())())())(((()((()((()())((()))(()()((()(())())(()))()())())))))()(()())))()()))(((()(()))((()((((())((())))((())()()))())()(((()()(((()))))))(((()))()(()(((())(())()()()))))()))()))))()(()))()()()))))()(()))()()(()())))(()))()())(())()())(())()()))(()())))((()())))())))))((()))())()()))))()))(((())(())()))()()((()))(((()))))((()((()))(())(((()))()()()())())())))(()(((())()())(())(((()()((())()))(()()(((())))((()(((()))(((((()(((())())))(())(()()((()(()(())())(((((())((()()))())(()())))()()()(()(((((((())))(()()()()((()(((())())())())))())())())))()((((())(((()()()())()))()()(()(()()))()))(())(()())))))()())()())))()()(())))))))((())()()(((()))()))())))))((()())((()())(((())()())()))(()(()()(((()(())()))()())()()(())()(()))))()))()()))))(())(()()(())((()))(()))((())))))(())))()))(()()(())))())()((())()))((()()(()())()()(()))())(((())()(((()((())()(()()()((()(()())(()())())((((())))())())))(()))(((())((()))))((()()(((())((())()()()))((()())()()())())))))((((()((()())))(())(())()()()(((((())())()()()(())())()((()(()())(((())((((()((()(((()))(()()))())()()(()(()(())))()))())))(()()(()))))))(()()())()()))()(())()(']
    for x in input:

        print x
        print s.longestValidParentheses(x)
